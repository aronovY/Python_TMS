Что читаем:
built-in: https://pythonworld.ru/osnovy/vstroennye-funkcii.html
format: https://pythonworld.ru/osnovy/formatirovanie-strok-metod-format.html
string format: https://pyformat.info/
datetime: https://pythonworld.ru/moduli/modul-datetime.html
Задания:
# 1: Написать программу, которая в качестве аргумента принимает объект данных datettime, необходимо найти сколько времени с времени переданного объекта в днях, часах, минутах.
# 2: Написать программу, которая будет принимать в качестве аргумента список целых числе и выводить в качестве рузльтата максимальное количество возможных уникальных комбинаций, например:
[2, 5, 8] -> (2, 5), (2, 8), (5, 8)
[72, 586, 12] -> (72, 586), (72, 12), (586, 12)
# 3: Программа в качестве аргументов принимает 10 разных строк, необходимо сосчитать количество наиболее частво встречаемых в переданных строках символовю.
# 4: Написать программу, которая будет выводить все числа в диапазоне от 0 до 1000, которые делять на 7 без остатка.
# 5: Написать программу, которая будет выводить на экран сумму всех чисел в диапазоне от 1 до 2000 у которых длинна представлена от 3 числа, например: 375, 687, 156, 111, а 6812 - нет и т.д.
# 6: Подсчитать топ 10 наиболее встречающихся слов в https://www.gutenberg.org/files/1112/1112.txt
# 7: Написать программу, которая будет генеририровать случайные строки, произвольной длинные в диапазоне от 1 до 4, в верхнем и нижнем регистре на вводимую пользователем длинну.
Например 25: ['HT', 'rv', 'UL', 'mD', 'ad', 'Qw', 'ad', 'EX', 'Kn', 'kD', 'MI', 'ti', 'HB', 'Xk', 'ET', 'xO', 'lh', 'pg', 'VN', 'su', 'kc', 'iF', 'Bm', 'vK', 'Vd', 'wF', 'zh', 'Ph', 'KY', 'Go']
# 8: Необходимо написать программу, которая сортирует список из примера задачи №7 игнорируя заглавные и строчные буквы в обратном порядке. Должно получиться:
['BH', 'ck', 'da', 'da', 'Dk', 'Dm', 'dV', 'Fi', 'Fw', 'gp', 'hl', 'hP', 'hz', 'IM', 'it', 'Kv', 'kX', 'LU', 'mB', 'nK', 'NV', 'oG', 'Ox', 'TE', 'TH', 'us', 'vr', 'wQ', 'XE', 'YK']
# 9: Необходимо написать программу, которая будет генерировать случайную последовательность отсортированных чисел. Затем последовательно генерировать 5 случайных чисел и вставлять их в уже имеющийся список.
[1, 6, 8, 10, 13]
2 -> [1, 2, 6, 8, 10, 13]
15 -> [1, 2, 6, 8, 10, 13, 15]
9 -> [1, 2, 6, 8, 9, 10, 13, 15]
# 10: Написать программу, которая принимает список список [[3, 5, 8], [5, 8, 10], [1, 2], [2, 13, 9]], и выводит в качестве результата отсортированный список по сумме чисел подсписков в обратном порядке: [[2, 13, 9], [5, 8, 10], [3, 5, 8], [1, 2]]
# 11*: Необходимо написать программу используя list comprehension, которая будет генерировать список словарей, каждый словарь которых содержит в качестве ключа случайную последовательность длинною от 1 до 5 заглавных символов, а в качестве значения список словарей, каждый их которых в свою очередь содержит две пары ключ-значение 'required' и 'selected' со случайными числами в диапазоне от 1 до 10 для 'required' и от 1, 6 для 'selected'. В общей сложности должен получиться список следующего вида:
[{'PH': [{'required': 1, 'selected': 1}, {'required': 2, 'selected': 5}, {'required': 5, 'selected': 9}]}, {'XKEOG': [{'required': 3, 'selected': 1}]}, {'J': [{'required': 5, 'selected': 8}, {'required': 5, 'selected': 10}, {'required': 5, 'selected': 10}]}, {'NVQG': [{'required': 5, 'selected': 8}, {'required': 5, 'selected': 6}, {'required': 5, 'selected': 9}, {'required': 4, 'selected': 6}, {'required': 4, 'selected': 9}]}, {'XGDB': [{'required': 2, 'selected': 10}, {'required': 2, 'selected': 4}, {'required': 5, 'selected': 7}]}, {'DZXN': [{'required': 3, 'selected': 3}, {'required': 3, 'selected': 3}, {'required': 4, 'selected': 4}]}, {'Y': [{'required': 1, 'selected': 8}, {'required': 3, 'selected': 9}]}, {'V': [{'required': 1, 'selected': 8}]}, {'I': [{'required': 3, 'selected': 10}]}, {'YU': [{'required': 4, 'selected': 1}, {'required': 4, 'selected': 8}, {'required': 2, 'selected': 1}]}]
# 12*: Необходимо написать программу используя list comprehension, которая будет фильтровать список словарей из задания № 11 и оставлять только те словари, у которых все вложенные последовательности выполняют требования, то есть каждый из них имеет selected > required. Результат:
[{'PH': [{'required': 1, 'selected': 1}, {'required': 2, 'selected': 5}, {'required': 5, 'selected': 9}]}, {'J': [{'required': 5, 'selected': 8}, {'required': 5, 'selected': 10}, {'required': 5, 'selected': 10}]}, {'NVQG': [{'required': 5, 'selected': 8}, {'required': 5, 'selected': 6}, {'required': 5, 'selected': 9}, {'required': 4, 'selected': 6}, {'required': 4, 'selected': 9}]}, {'XGDB': [{'required': 2, 'selected': 10}, {'required': 2, 'selected': 4}, {'required': 5, 'selected': 7}]}, {'DZXN': [{'required': 3, 'selected': 3}, {'required': 3, 'selected': 3}, {'required': 4, 'selected': 4}]}, {'Y': [{'required': 1, 'selected': 8}, {'required': 3, 'selected': 9}]}, {'V': [{'required': 1, 'selected': 8}]}, {'I': [{'required': 3, 'selected': 10}]}]