1). Описать такую систему наследований классов Task1A, Task1B, Task1C, Task1D, Task1E без повторений переменных, чтобы:
        Переменная x со значением 1 доступна (но прописана только у одного) у классов Task1B и Task1C.
        Переменная x = 2 перегружена в классе Task1A (она была бы = 1, если бы не написали x = 2).
        В Task1D прописана переменная x = 3.
        Task1C наследуется от Task1D (не факт, что только от него)
        Task1A не наследуется от Task1C.
        В Task1E не прописан x, но доступен со значением 3. Наследуется только от одного родителя.


2). Напишите класс Department (департамент), который принимает название (сохранить в self.name),
        информацию о сотрудниках (self.employees, dict, где ключи - имя сотрудника (str),
        а значения - его заработная плата (float)) и ежемесячный бюджет департамента (self.budget - int).
        Определить следующие методы:
        a) get_budget_plan - возвращает бюджет департамента за вычетом зарплат всех сотрудников (float).
        Если в результате получилось отрицательное значение - вызвать BudgetError (raise BudgetError).
        Этот класс исключения объявить в теле класса Department и унаследовать от ValueError.

        class BudgetError(ValueError):
            pass


        b) get_average_salary - возвращает среднюю зарплату внутри департамента,
            округленную до двух знаков после запятой (float).
        c) merge_departments - метод, который принимает неограниченное количество
            департаментов и возвращает новый департамент, в котором объединены все сотрудники (гарантируется,
        что имена сотрудников между разными департаментами не повторяются), суммарный бюджет,
        а название - все названия департаментов, разделенные пробелом, тире и пробелом: " - ".
        В новом названии старые названия департаментов должны идти в том же порядке, что и полученные департаменты.
        Если в результате не будет хватать суммарного бюджета на суммарную зарплату
        всех сотрудников - должен сработать вызов BudgetError.
        d) Операция суммы между двумя департаментами должна отрабатывать аналогично операции merge_departments.
        e) Строковое представление департамента должно отдавать строку следующего вида:
            "{Название} ({количество_сотрудников} - {средняя_зарплата}, {бюджет})"
        f) Оператор OR (dep1 | dep2) должен выбирать между департаментами тот, у которого план по бюджету
            (вычитаем из бюджета все зарплаты) будет выше. Если равны - просто первый перед OR.
             Если у одного из них план отрицательный - BudgetError.
